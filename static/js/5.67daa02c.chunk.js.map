{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogUser/DialogUser.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Dialog/DialogMessage/DialogMessage.module.css","components/Dialogs/DialogUser/DialogUser.jsx","components/Dialogs/Dialog/DialogMessage/DialogMessage.jsx","components/Dialogs/Dialog/Dialog.jsx","components/Dialogs/Dialog/DialogContainer.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/withAuthRedirect.js"],"names":["module","exports","DialogUser","props","path","id","className","styles","user","to","activeClassName","active","image","src","alt","name","DialogMessage","dialogMessage","myMessage","myDialogMessage","text","Dialog","messageDialog","dialogMessages","reverse","map","message","messagesColumn","DialogContainer","connect","state","dialogsPage","dispatch","NewDialogsMessage","onSubmit","values","addMessage","newMessageText","handleSubmit","submitting","newPost","validate","composeValidators","required","minLength","maxLength","input","meta","type","textarea","error","touched","textareaError","placeholder","button","disabled","Dialogs","userDialog","dialogUsers","dialogContent","dialogRow","currentUser","currentImage","currentName","compose","dialogTextarea","addMessageActionCreator","withAuthRedirect","mapStateToPropsForRedirect","isAuth","auth","Component","RedirectComponent","this","React"],"mappings":"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","file":"static/js/5.67daa02c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogRow\":\"Dialogs_dialogRow__Wk3qp\",\"dialogUsers\":\"Dialogs_dialogUsers__2yXYp\",\"dialogMessages\":\"Dialogs_dialogMessages__2wMeX\",\"currentUser\":\"Dialogs_currentUser__Av_et\",\"currentImage\":\"Dialogs_currentImage__1vm5R\",\"currentName\":\"Dialogs_currentName__371tb\",\"newPost\":\"Dialogs_newPost__3Bcyd\",\"message\":\"Dialogs_message__2QJJU\",\"text\":\"Dialogs_text__Qj1s3\",\"textarea\":\"Dialogs_textarea__fubWH\",\"textareaError\":\"Dialogs_textareaError__3sf2p\",\"button\":\"Dialogs_button__waOTW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"DialogUser_user__2ODdZ\",\"image\":\"DialogUser_image__Nr0Pn\",\"active\":\"DialogUser_active__10Cix\",\"name\":\"DialogUser_name__1Dwjc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagesColumn\":\"Dialog_messagesColumn__3d9EV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogMessage\":\"DialogMessage_dialogMessage__xbeVU\",\"myDialogMessage\":\"DialogMessage_myDialogMessage__3ptc-\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport styles from './DialogUser.module.css';\r\n\r\n\r\nconst DialogUser = (props) => {\r\n\tlet path = `/dialogs/${props.id}`;\r\n\treturn (\r\n\t\t<NavLink className={styles.user} to={path} activeClassName={styles.active}>\r\n\t\t\t<img className={styles.image} src={props.src} alt=\"Avatar not found\" />\r\n\t\t\t<span className={styles.name}>{props.name}</span>\r\n\t\t</NavLink>\r\n\t)\r\n}\r\n\r\nexport default DialogUser;","import React from 'react';\r\nimport styles from './DialogMessage.module.css';\r\n\r\nconst DialogMessage = (props) => {\r\n\treturn (\r\n\t\t<div className={styles.dialogMessage + (props.myMessage === true ? ' ' + styles.myDialogMessage : '')}>\r\n\t\t\t{props.text}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default DialogMessage;","import React from 'react';\r\n\r\nimport styles from './Dialog.module.css';\r\nimport DialogMessage from './DialogMessage/DialogMessage';\r\n\r\nconst Dialog = (props) => {\r\n\r\n\tlet messageDialog = [...props.dialogMessages]\r\n\t\t.reverse()\r\n\t\t.map(message => <DialogMessage key={message.id} text={message.text} myMessage={message.myMessage} />);\r\n\r\n\treturn (\r\n\r\n\t\t<div className={styles.messagesColumn}>\r\n\r\n\t\t\t{messageDialog}\r\n\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Dialog;\r\n","import { connect } from 'react-redux';\r\nimport Dialog from './Dialog';\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tdialogMessages: state.dialogsPage.dialogMessages,\r\n\t}\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t}\r\n};\r\n\r\nconst DialogContainer = connect(mapStateToProps, mapDispatchToProps)(Dialog);\r\n\r\nexport default DialogContainer;\r\n\r\n","import React from 'react';\r\nimport { Form, Field } from 'react-final-form'\r\n\r\nimport styles from './Dialogs.module.css';\r\nimport DialogUser from './DialogUser/DialogUser';\r\nimport DialogContainer from './Dialog/DialogContainer';\r\nimport { composeValidators, required, minLength, maxLength } from '../../utils/validators';\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\tlet userDialog = props.dialogUsers.map(user => <DialogUser key={user.id} name={user.name} src={user.src} />);\r\n\treturn (\r\n\t\t<div className={styles.dialogContent}>\r\n\t\t\t<div className={styles.dialogRow}>\r\n\t\t\t\t<div className={styles.dialogUsers}>\r\n\t\t\t\t\t{userDialog}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={styles.dialogMessages}>\r\n\t\t\t\t\t<div className={styles.currentUser}>\r\n\t\t\t\t\t\t<img className={styles.currentImage} src=\"https://gamehag.com/static/avatar/5194053_max.jpg\" alt=\"Avatar not found\" />\r\n\t\t\t\t\t\t<div className={styles.currentName}>\r\n\t\t\t\t\t\t\tGroot\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<DialogContainer />\r\n\t\t\t\t\t<NewDialogsMessage addMessage={props.addMessage} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div >\r\n\t)\r\n}\r\n\r\nconst NewDialogsMessage = (props) => {\r\n\r\n\tlet addNewMessage = (values) => {\r\n\t\tprops.addMessage(values.newMessageText);\r\n\t\tvalues.newMessageText = '';\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Form onSubmit={addNewMessage}>\r\n\t\t\t{({ handleSubmit, submitting }) =>\r\n\t\t\t\t<form className={styles.newPost} onSubmit={handleSubmit}>\r\n\t\t\t\t\t<Field name=\"newMessageText\" className={styles.message} validate={composeValidators(required, minLength(3), maxLength(300))} >\r\n\t\t\t\t\t\t{({ input, meta }) => (\r\n\t\t\t\t\t\t\t<div className={styles.text}>\r\n\t\t\t\t\t\t\t\t<textarea {...input} type=\"textarea\" className={styles.textarea + (meta.error && meta.touched ? ' ' + styles.textareaError : '')}\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"Type your message here...\" />\r\n\t\t\t\t\t\t\t\t{meta.error && meta.touched && <span><br />{meta.error}</span>}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Field>\r\n\t\t\t\t\t<button type=\"submit\" className={styles.button} disabled={submitting}>Send</button>\r\n\t\t\t\t</form>\r\n\t\t\t}\r\n\t\t</Form>\r\n\t)\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\n\r\nimport Dialogs from './Dialogs';\r\n\r\nimport { addMessageActionCreator } from '../../redux/dialogsReducer';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tdialogUsers: state.dialogsPage.dialogUsers,\r\n\t\tdialogTextarea: state.dialogsPage.dialogTextarea,\r\n\t}\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\taddMessage: (newMessageText) => {\r\n\t\t\tdispatch(addMessageActionCreator(newMessageText));\r\n\t\t},\r\n\t}\r\n};\r\n\r\nexport default compose(\r\n\tconnect(mapStateToProps, mapDispatchToProps),\r\n\twithAuthRedirect,\r\n)(Dialogs);\r\n\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n\t\treturn {\r\n\t\t\tisAuth: state.auth.isAuth,\r\n\t\t}\r\n\t};\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\tclass RedirectComponent extends React.Component {\r\n\t\trender () {\r\n\t\t\tif (!this.props.isAuth) return <Redirect to={'/login'} />;\r\n\t\t\t\treturn <Component {...this.props} />\r\n\t\t}\r\n\t}\r\n\r\n\tlet ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n\treturn ConnectedAuthRedirectComponent;\r\n}"],"sourceRoot":""}